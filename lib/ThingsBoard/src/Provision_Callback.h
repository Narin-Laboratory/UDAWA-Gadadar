#ifndef Provision_Callback_h
#define Provision_Callback_h

// Local includes.
#include "Timeoutable_Request.h"


/// @brief Struct dispatch tag used to differentiate between the differnt possible provisioning strategies and their corresponding constructors.
/// @note Allows the same paramter types to be passed without causing overload resolution issues
struct Access_Token{};

/// @brief Struct dispatch tag used to differentiate between the differnt possible provisioning strategies and their corresponding constructors.
/// @note Allows the same paramter types to be passed without causing overload resolution issues
struct Device_Access_Token{};

/// @brief Struct dispatch tag used to differentiate between the differnt possible provisioning strategies and their corresponding constructors.
/// @note Allows the same paramter types to be passed without causing overload resolution issues
struct Basic_MQTT_Credentials{};

/// @brief Struct dispatch tag used to differentiate between the differnt possible provisioning strategies and their corresponding constructors.
/// @note Allows the same paramter types to be passed without causing overload resolution issues
struct X509_Certificate{};


/// @brief Provisioning callback wrapper
/// @note Contains the needed configuration settings to create the request that should be sent to the server.
/// Documentation about the specific use of Provisioning devices in ThingsBoard can be found here https://thingsboard.io/docs/user-guide/device-provisioning/
class Provision_Callback : public Callback<void, JsonDocument const &> {
  public:
    /// @brief Constructs empty callback, will result in never being called. Internals are simply default constructed as nullptr
    Provision_Callback() = default;

    /// @brief Constructs callback that will be called upon a provision request arrival, where the requested credentials were sent by the cloud and received by the client
    /// @note The requested credentials are one of the possible MQTT provisioning strategies either Access Token, Device Access Token, Basic MQTT Credentials or X509 Certificate.
    /// Access Token and Device Access Token are nearly identically, meaning they both consists of a Key and Secret that is used to identify the Device Profile to use,
    /// as well as the unqiue name that should be assigned to the device. The only difference is that for Access Token strategy,
    /// the Access Token that is used to reconnect as a created device to the cloud is generated by the server
    /// and the Device Access Token strategy excepcts this Access Token to be generated by the device instead.
    /// The Basic MQTT Credentials strategy, additionally expects a MQTT Client Username, Password and ID and only allows registered users to provision devices for certain Device Profiles.
    /// Lastly the most advanced and secure, but also most difficult strategy, X509 Certificate, which expects a hash of a X509 certificate that has to be registered with the server.
    /// This allows to uniquely ensure that only registered and authenticated devices can self-register, this is not possible for the other provisioning strategies.
    /// See https://thingsboard.io/docs/user-guide/device-provisioning/?mqttprovisioning=without#mqtt-device-apis for more information
    /// @param callback Callback method that will be called upon provisioning response arrival
    /// @param provision_device_key Non owning pointer to the provisioning key of the Device Profile that should be used to create the device under.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param provision_device_secret Non owning pointer to the provisioning secret of the Device Profile that should be used to create the device under.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param username Non owning pointer to the basic MQTT credentials username, that will be used by the provisioned device.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param password Non owning pointer to the basic MQTT credentials password, that will be used by the provisioned device.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param client_id Non owning pointer to the basic MQTT credentials client ID, that will be used by the provisioned device.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param access_token Non owning pointer to the access token generated by the device, that will be used by the provisioned device. Alternative to letting the access token be generated by the cloud instead.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param hash Non owning pointer to the public X.509 certificate hash, that will be used by the provisioned device.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param device_name Non owning pointer to the name the created device should have on the cloud, pass nullptr or an empty string if a random string generated by the server should be used as the name.
    /// Needs to be unique, therefore using the Mac Address of the device is recommended if an actual name is passed.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    /// @param timeout_microseconds Optional amount of microseconds until a response should have been received from the server, counted from the moment the request is sent.
    /// If a response is not received in the timeout time, the timeout callback method will be called to inform the user that the request has failed.
    /// If the value is 0 the timer will not be started and therefore never call the timeout callback method, default = 0
    /// @param timeout_callback Optional callback method that will be called upon request timeout (did not receive a response in the given timeout time). Can happen if the requested method does not exist on the cloud,
    /// or if the connection could not be established. A nullptr means even if a timeout occured the callback is simply ignored and the user not informed, default = nullptr
    Provision_Callback(Access_Token, function callback, char const * provision_device_key, char const * provision_device_secret, char const * device_name = nullptr, uint64_t const & timeout_microseconds = 0U, Callback_Watchdog::function timeout_callback = nullptr);

    /// @copydetail Provision_Callback(Access_Token, function, char const *, char const *, char const *, uint64_t const &, Callback_Watchdog::function)
    Provision_Callback(Device_Access_Token, function callback, char const * provision_device_key, char const * provision_device_secret, char const * access_token, char const * device_name = nullptr, uint64_t const & timeout_microseconds = 0U, Callback_Watchdog::function timeout_callback = nullptr);

    /// @copydetail Provision_Callback(Access_Token, function, char const *, char const *, char const *, uint64_t const &, Callback_Watchdog::function)
    Provision_Callback(Basic_MQTT_Credentials, function callback, char const * provision_device_key, char const * provision_device_secret, char const * username, char const * password, char const * client_id, char const * device_name = nullptr, uint64_t const & timeout_microseconds = 0U, Callback_Watchdog::function timeout_callback = nullptr);

    /// @copydetail Provision_Callback(Access_Token, function, char const *, char const *, char const *, uint64_t const &, Callback_Watchdog::function)
    Provision_Callback(X509_Certificate, function callback, char const * provision_device_key, char const * provision_device_secret, char const * hash, char const * device_name = nullptr, uint64_t const & timeout_microseconds = 0U, Callback_Watchdog::function timeout_callback = nullptr);

    ~Provision_Callback() override = default;

    /// @brief Gets the provisioning key of the Device Profile, that should be used to create the device under
    /// @return Non owning pointer to the provisioning key of the Device Profile.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Device_Key method
    char const * Get_Device_Key() const;

    /// @brief Sets the provisioning key of the Device Profile, that should be used to create the device under
    /// @param provision_device_key Non owning pointer to the provisioning key of the Device Profile.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Device_Key(char const * provision_device_key);

    /// @brief Gets the provisioning secret of the Device Profile that should be used to create the device under
    /// @return Non owning pointer to the provisioning secret of the Device Profile.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Device_Secret method
    char const * Get_Device_Secret() const;

    /// @brief Sets the provisioning secret of the Device Profile that should be used to create the device under
    /// @param provision_device_secret Non owning pointer to the provisioning secret of the Device Profile.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Device_Secret(char const * provision_device_secret);

    /// @brief Gets the name the created device should have on the cloud.
    /// @note If the value is a nullptr or an empty string, a random string will be generated by the server that will be used as the name instead
    /// @return Non owning pointer to the name the created device should have on the cloud.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Device_Name method
    char const * Get_Device_Name() const;

    /// @brief Sets the name the created device should have on the cloud, pass nullptr or an empty string if a random string generated by the server should be used as the name.
    /// @note Needs to be unique, therefore using the Mac Address of the device is recommended if an actual name is passed.
    /// @param device_name Non owning pointer to the name the created device should have on the cloud.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Device_Name(char const * device_name) ;

    /// @brief Gets the access token generated by the device, that will be used by the provisioned device
    /// @note Alternative to letting the access token be generated by the cloud instead
    /// @return Non owning pointer to the access token generated by the device.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Device_Access_Token method
    char const * Get_Device_Access_Token() const;

    /// @brief Sets the access token generated by the device, that will be used by the provisioned device
    /// @note Alternative to letting the access token be generated by the cloud instead
    /// @param access_token Non owning pointer to the access token generated by the device.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Device_Access_Token(char const * access_token);

    /// @brief Gets the basic MQTT credentials username, that will be used by the provisioned device
    /// @return Non owning pointer to the basic MQTT credentials username.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Credentials_Username method
    char const * Get_Credentials_Username() const;

    /// @brief Sets the basic MQTT credentials username, that will be used by the provisioned device
    /// @param username Non owning pointer to the basic MQTT credentials username.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Credentials_Username(char const * username);

    /// @brief Gets the basic MQTT credentials password, that will be used by the provisioned device
    /// @return Non owning pointer to the basic MQTT credentials password
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Credentials_Password method
    char const * Get_Credentials_Password() const;

    /// @brief Sets the basic MQTT credentials password, that will be used by the provisioned device
    /// @param password Non owning pointer to the basic MQTT credentials password.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Credentials_Password(char const * password);

    /// @brief Gets the basic MQTT credentials client ID, that will be used by the provisioned device
    /// @return Non owning pointer to the basic MQTT credentials client ID.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Credentials_Client_ID method
    char const * Get_Credentials_Client_ID() const;

    /// @brief Sets the basic MQTT credentials client ID, that will be used by the provisioned device
    /// @param client_id Non owning pointer to the basic MQTT credentials client ID.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Credentials_Client_ID(char const * client_id);

    /// @brief Gets the public X.509 certificate hash, that will be used by the provisioned device
    /// @return Non owning pointer to the public X.509 certificate hash.
    /// Owned by the user that passed it originally in the constructor or with the @ref Set_Certificate_Hash method
    char const * Get_Certificate_Hash() const;

    /// @brief Sets the public X.509 certificate hash, that will be used by the provisioned device
    /// @param hash Non owning pointer to the public X.509 certificate hash.
    /// Additionally it has to be kept alive by the user until the @ref Provision_Request method has been called with this instance as the argument, because that method copies the data into the outgoing MQTT buffer to create the provision request
    void Set_Certificate_Hash(char const * hash);

    /// @brief Gets the string containing the used credentials type that decides which provisioning method is actually used,
    /// by the @ref Provision_Callback and therefore decides what response we will receive from the server
    /// @return Owning pointer to th string containing the used credentials type.
    /// Simply points to a compile time string constant saved into static memory
    char const * Get_Credentials_Type() const;

    /// @brief Gets the request timeout callback
    /// @note Will be called when no response to the request was received in the expected amount of time, causing the internal watchdog to time out.
    /// To achieve this behaviour the internal timer can be started and stopped, and simply calls the subscribed callback if the timer is not stopped before it times out
    /// @return Request timeout callback
    Timeoutable_Request & Get_Request_Timeout();

  private:
    char const          *m_device_key = {};          // Device Profile provisioning key
    char const          *m_device_secret = {};       // Device Profile provisioning secret
    char const          *m_device_name = {};         // Device name the provisioned device should have
    char const          *m_access_token = {};        // Access token supplied by the device, if it should not be generated by the server instead
    char const          *m_cred_username = {};       // MQTT credential username, if the MQTT basic credentials method is used
    char const          *m_cred_password = {};       // MQTT credential password, if the MQTT basic credentials method is used
    char const          *m_cred_client_id = {};      // MQTT credential client_id, if Mthe QTT basic credentials method is used
    char const          *m_hash = {};                // X.509 certificate hash, if the X.509 certificate authentication method is used
    char const          *m_credentials_type = {};    // Credentials type we are requesting from the server, nullptr for the default option (Credentials generated by the ThingsBoard server)
    Timeoutable_Request m_request_timeout = {}; // Handles callback that will be called if request times out
};

#endif // Provision_Callback_h
